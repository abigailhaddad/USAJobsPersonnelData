# -*- coding: utf-8 -*-
"""
Created on Mon Apr 24 19:10:25 2023

@author: abiga
"""
import string
import pandas as pd
import numpy as np
import openai


def find_metrics(data_frame: pd.DataFrame) -> None:
    """
    Finds and prints several metrics from the given DataFrame.

    Args:
        data_frame (pd.DataFrame): The input DataFrame to analyze.
    """
    # Create a translation table to remove punctuation marks
    translator = str.maketrans('', '', string.punctuation)
    # Apply the translation table to remove punctuation marks from the "occupation" column
    data_frame['Yes_or_No'] = data_frame['occupation'].astype(str).str[0:3].apply(lambda x: x.translate(translator).strip())


    # What percent got classified as data science?
    print(data_frame['Yes_or_No'].value_counts(normalize=True))
    data_frame=data_frame.loc[data_frame['Yes_or_No']!=""]
    print(len(data_frame))
    # How many of them have 'data sci' in them?
    data_frame['has_data_sci'] = np.where(
        data_frame['info'].str.lower().str.contains("data sci"),
        "data sci",
        "not")
    print(pd.crosstab(data_frame['Yes_or_No'], data_frame['has_data_sci']))

    # Examples of nos with 'data sci'
    no_yes_data_sci = data_frame.loc[(data_frame['has_data_sci'] == "data sci")
                             & (data_frame['Yes_or_No'] == "No")]
    print( no_yes_data_sci['PositionURI'].values)

    # Examples of yesses without 'data sci'
    yes_no_data_sci = data_frame.loc[(data_frame['has_data_sci'] == "not")
                             & (data_frame['Yes_or_No'] == "Yes")]

    # Random 5
    yes_no_data_sci.sample(5)[["PositionTitle", "occupation"]].to_excel(
        "5 selected data sci jobs without data sci.xlsx")
    pure_data_sci = yes_no_data_sci = data_frame.loc[(data_frame['has_data_sci'] != "not")]
    print(len(pure_data_sci))

df_gpt_fields=pd.read_pickle("../data/file_for_app_sample.pkl")
df_sample=pd.read_pickle("../data/sample_info.pkl")
df_merged=df_gpt_fields.merge(df_sample, left_on='PositionURI', right_on='PositionURI')

find_metrics(df_merged)

summary_with_data_sci=df_merged.loc[df_merged['job_duties'].astype(str).str.lower().str.contains("data sci")]



with open("../key/key.txt", "r") as key_file:
    api_key = key_file.read().strip()
    openai.api_key = api_key

def process_prompt(prompt, engine, temperature):
    """
    Processes a given prompt using the specified engine and temperature.

    Args:
        prompt (str): The input prompt.
        engine (str): The engine to be used for processing the prompt.
        temperature (float): The temperature to be used in processing the prompt.

    Returns:
        str: The response generated by the engine for the given prompt.
    """

    messages = [
        {"role": "user", "content": prompt}
    ]
    try:
        response = openai.ChatCompletion.create(
            model=engine,
            messages=messages,
            max_tokens=1024,
            temperature=temperature)
        return response.choices[0]['message']['content']
    except Exception as e:
        print(
            f"Error processing prompt. Engine: {engine}, Prompt: {prompt}, Error: {str(e)[:100]}")
        return ''


def gpt_calls(sample: pd.DataFrame) -> pd.DataFrame:
    """
    Processes a sample DataFrame by calling the GPT engine for each row, generating a filtered DataFrame with additional columns for occupation, job duties, and job qualifications.

    Args:
        sample (pd.DataFrame): The input DataFrame.

    Returns:
        pd.DataFrame: The filtered DataFrame with additional columns for occupation, job duties, and job qualifications.
    """

    engine = 'gpt-3.5-turbo'
    temperature = 0.1

    # Define the prompt
    prompt_text = r"On a scale of 1 to 10, is this a data science or data science-adjacent job? please give a score and explain: {values[12]}"

    # Create empty lists to store results
    occupation_results = []

    # Iterate through the dataframe and process each prompt
    for values in sample.values:
    # Process the prompt
        response = process_prompt(prompt_text.format(values=values), engine, temperature)

        # Extract the occupation result
        occupation = response
        occupation_results.append(occupation)

# Add the results as new columns in the DataFrame
    sample['occupation_rating'] = occupation_results


    return sample

subset_data=df_merged.sample(n=100, random_state=1)
new_concept=gpt_calls(subset_data)
new_concept['score']=new_concept['occupation_rating'].str.split("Score:").str[1].str.split("\n").str[0]

pd.crosstab(new_concept['score'],new_concept['Yes_or_No'])